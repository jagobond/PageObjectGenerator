// Generated by PageObjectGenerator
// Timestamp: 2025-03-27 06:51:44 UTC

using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers; // Recommended for ExpectedConditions
using System;
using System.Threading; // For Thread.Sleep if absolutely needed (try to avoid)

namespace YourProject.PageObjects
{
    /// <summary>
    /// Represents the AboutOurCompanies page.
    /// NOTE: This is auto-generated code. Review and refine locators and methods.
    /// </summary>
    public class AboutOurCompanies
    {
        private readonly IWebDriver _driver;
        private readonly WebDriverWait _wait;
        private readonly TimeSpan _defaultWaitTimeout = TimeSpan.FromSeconds(10);

        public AboutOurCompanies(IWebDriver driver)
        {
            _driver = driver ?? throw new ArgumentNullException(nameof(driver));
            _wait = new WebDriverWait(_driver, _defaultWaitTimeout);
            // You might want to wait for a specific element indicating the page is fully loaded
            // _wait.Until(ExpectedConditions.ElementIsVisible(By.Id("some-stable-element-id")));
        }

        // --- Locators ---
        private static readonly By _skipToMainContentLocator = By.CssSelector("a.skipcontent");
        private static readonly By _link1Locator = By.CssSelector("a.header__logo-link[title='Homepage']");
        private static readonly By _searchLocator = By.CssSelector("a.header__search-box.search-box__button.search-box__button--search.search-box__button--control.button.button--secondary.button--with-icon.button--search.js-nav-search-toggle");
        private static readonly By _navToggleLocator = By.Id("nav-toggle");
        private static readonly By _link2Locator = By.CssSelector("a.header__logo-link[title='Homepage']");
        private static readonly By _aboutUsLocator = By.CssSelector("button.nav__list-item-link.js-nav-tab");
        private static readonly By _backLocator = By.CssSelector("button.nav__flyout-back.nav__list-item-link.js-nav-tab");
        private static readonly By _aboutUs2Locator = By.CssSelector("a.button.button--primary.button--arrow.nav__all-btn");
        private static readonly By _ourServicesLocator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _ourServices2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _ourBeliefsAndValuesLocator = By.CssSelector("button.nav__flyout-item-link.js-nav-flyout-tab.nav__flyout-bordered-link.nav__flyout-bordered-link");
        private static readonly By _ourBeliefsAndValues2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _theQuilterFoundationLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _ourBusinessModelAndStrategyLocator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _ourBusinessModelAndStrategy2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _quilterLeadershipLocator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _quilterLeadership2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _corporateGovernanceLocator = By.CssSelector("button.nav__flyout-item-link.js-nav-flyout-tab.nav__flyout-bordered-link.nav__flyout-bordered-link");
        private static readonly By _governanceFrameworkLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _boardResponsibilitiesLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _boardCommitteesLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _responsibleInvestmentLocator = By.CssSelector("button.nav__flyout-item-link.js-nav-flyout-tab.nav__flyout-bordered-link.nav__flyout-bordered-link");
        private static readonly By _responsibleInvestment2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _corporateSustainabilityLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _reportsAndStatementsLocator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _reportsAndStatements2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _investorRelationsLocator = By.CssSelector("button.nav__list-item-link.js-nav-tab");
        private static readonly By _back2Locator = By.CssSelector("button.nav__flyout-back.nav__list-item-link.js-nav-tab");
        private static readonly By _investorRelations2Locator = By.CssSelector("a.button.button--primary.button--arrow.nav__all-btn");
        private static readonly By _stockExchangeAnnouncementsLocator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _stockExchangeAnnouncements2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _resultsReportsAndEventsLocator = By.CssSelector("button.nav__flyout-item-link.js-nav-flyout-tab.nav__flyout-bordered-link.nav__flyout-bordered-link");
        private static readonly By _financialCalendarLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _resultsAndPresentationsLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _annualReportLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _annualReportsArchiveLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _regulatoryReportsAndCompanyDisclosuresLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _prospectusAndSupportingDocumentationLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _analystCoverageAndConsensusLocator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _analystCoverageAndConsensus2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _shareholderCentreLocator = By.CssSelector("button.nav__flyout-item-link.js-nav-flyout-tab.nav__flyout-bordered-link.nav__flyout-bordered-link");
        private static readonly By _shareholderCentre2Locator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _aboutQuilterPlcSharesLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _sharePriceToolsLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _dividendsLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _generalMeetingHubLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _frequentlyAskedQuestionsLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _registrarContactInformationLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _manageYourShareholdingLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _oddLotOffersLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _returnOfCapital2022Locator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _debtHolderCentreLocator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _debtHolderCentre2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _shareBuyback20202022Locator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _shareBuyback202020222Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _mediaCentreLocator = By.CssSelector("a.nav__list-item-link");
        private static readonly By _back3Locator = By.CssSelector("button.nav__flyout-back.nav__list-item-link.js-nav-tab");
        private static readonly By _mediaCentre2Locator = By.CssSelector("a.button.button--primary.button--arrow.nav__all-btn");
        private static readonly By _careersLocator = By.CssSelector("a.nav__list-item-link");
        private static readonly By _back4Locator = By.CssSelector("button.nav__flyout-back.nav__list-item-link.js-nav-tab");
        private static readonly By _careers2Locator = By.CssSelector("a.button.button--primary.button--arrow.nav__all-btn");
        private static readonly By _contactUsLocator = By.CssSelector("button.nav__list-item-link.js-nav-tab");
        private static readonly By _back5Locator = By.CssSelector("button.nav__flyout-back.nav__list-item-link.js-nav-tab");
        private static readonly By _contactUs2Locator = By.CssSelector("a.button.button--primary.button--arrow.nav__all-btn");
        private static readonly By _shareholdersLocator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _shareholders2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _analystOrInstitutionalInvestorLocator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _analystOrInstitutionalInvestor2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _customerOrAdviserLocator = By.CssSelector("a.nav__flyout-item-link.nav__flyout-bordered-link.nav__flyout-item-link--no-flyout");
        private static readonly By _customerOrAdviser2Locator = By.CssSelector("a.cta.cta--primary.cta--with-arrow.nav__all-btn");
        private static readonly By _otherBusinessAreasLocator = By.CssSelector("button.nav__flyout-item-link.js-nav-flyout-tab.nav__flyout-bordered-link.nav__flyout-bordered-link");
        private static readonly By _humanResourcesLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _procurementAndSupplierManagementLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _quilterFinancialAdviserSchoolLocator = By.CssSelector("a.nav__flyout-group-block-list-link");
        private static readonly By _quilterPlcLocator = By.CssSelector("a.breadcrumbs__link.breadcrumb__link.js-breadcrumb-item");
        private static readonly By _aboutUs3Locator = By.CssSelector("a.breadcrumbs__link.js-breadcrumb-item");
        private static readonly By _quilterCheviotLocator = By.XPath("//a[normalize-space(.)=''Quilter Cheviot'']");
        private static readonly By _quilterCheviotFinancialPlanningLocator = By.XPath("//a[normalize-space(.)=''Quilter Cheviot Financial Planning'']");
        private static readonly By _quilterFinancialPlanningLocator = By.XPath("//a[normalize-space(.)=''Quilter Financial Planning'']");
        private static readonly By _quilterInvestmentPlatformLocator = By.XPath("//a[normalize-space(.)=''Quilter investment platform'']");
        private static readonly By _quilterInvestorsLocator = By.XPath("//a[normalize-space(.)=''Quilter Investors'']");
        private static readonly By _strategyLocator = By.Id("strategy");
        private static readonly By _link3Locator = By.CssSelector("a.footer__main-logo");
        private static readonly By _literatureLibraryLocator = By.CssSelector("a.footer__main-nav-list-item-link");
        private static readonly By _quiltercomLocator = By.CssSelector("a.footer__main-nav-list-item-link");
        private static readonly By _contactUs3Locator = By.CssSelector("a.footer__main-nav-list-item-cta.footer__main-nav-list-item-cta--button.button.button--primary.button--highlight.button--arrow");
        private static readonly By _termsOfUseLocator = By.XPath("//a[normalize-space(.)=''Terms of use'']");
        private static readonly By _privacyNoticeLocator = By.XPath("//a[normalize-space(.)=''Privacy notice'']");
        private static readonly By _cookieNoticeLocator = By.XPath("//a[normalize-space(.)=''Cookie notice'']");
        private static readonly By _accessibilityLocator = By.XPath("//a[normalize-space(.)=''Accessibility'']");
        private static readonly By _corporateAndRegulatoryInformationLocator = By.XPath("//a[normalize-space(.)=''Corporate and Regulatory information'']");
        private static readonly By _secureEmailLocator = By.XPath("//a[normalize-space(.)=''Secure email'']");
        private static readonly By _modernSlaveryStatementLocator = By.XPath("//a[normalize-space(.)=''Modern slavery statement'']");
        private static readonly By _suppliersLocator = By.XPath("//a[normalize-space(.)=''Suppliers'']");
        private static readonly By _link4Locator = By.CssSelector("a.social__link");
        private static readonly By _link5Locator = By.CssSelector("a.social__link");
        private static readonly By _link6Locator = By.CssSelector("a.social__link");

        // --- Interaction Methods ---
        private IWebElement FindSkipToMainContentElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_skipToMainContentLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_skipToMainContentLocator));
            return _driver.FindElement(_skipToMainContentLocator);
        }

        /// <summary>
        /// Clicks the Skip to main content Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSkipToMainContent()
        {
            Console.WriteLine("Clicking SkipToMainContent...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_skipToMainContentLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking SkipToMainContent: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Skip to main content Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSkipToMainContentText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_skipToMainContentLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Skip to main content Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSkipToMainContentDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_skipToMainContentLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_skipToMainContentLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END SkipToMainContent ---

        private IWebElement FindLink1Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_link1Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_link1Locator));
            return _driver.FindElement(_link1Locator);
        }

        /// <summary>
        /// Clicks the Link Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickLink1()
        {
            Console.WriteLine("Clicking Link1...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_link1Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Link1: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Link Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetLink1Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_link1Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Link Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsLink1Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_link1Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_link1Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Link1 ---

        private IWebElement FindSearchElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_searchLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_searchLocator));
            return _driver.FindElement(_searchLocator);
        }

        /// <summary>
        /// Clicks the Search Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSearch()
        {
            Console.WriteLine("Clicking Search...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_searchLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Search: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Search Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSearchText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_searchLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Search Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSearchDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_searchLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_searchLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Search ---

        private IWebElement FindNavToggleElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_navToggleLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_navToggleLocator));
            return _driver.FindElement(_navToggleLocator);
        }

        /// <summary>
        /// Clicks the nav-toggle Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickNavToggle()
        {
            Console.WriteLine("Clicking NavToggle...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_navToggleLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking NavToggle: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the nav-toggle Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetNavToggleText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_navToggleLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the nav-toggle Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsNavToggleDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_navToggleLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_navToggleLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END NavToggle ---

        private IWebElement FindLink2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_link2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_link2Locator));
            return _driver.FindElement(_link2Locator);
        }

        /// <summary>
        /// Clicks the Link Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickLink2()
        {
            Console.WriteLine("Clicking Link2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_link2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Link2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Link Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetLink2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_link2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Link Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsLink2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_link2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_link2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Link2 ---

        private IWebElement FindAboutUsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_aboutUsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_aboutUsLocator));
            return _driver.FindElement(_aboutUsLocator);
        }

        /// <summary>
        /// Clicks the About us Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAboutUs()
        {
            Console.WriteLine("Clicking AboutUs...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_aboutUsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AboutUs: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the About us Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAboutUsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_aboutUsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the About us Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAboutUsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_aboutUsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_aboutUsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END AboutUs ---

        private IWebElement FindBackElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_backLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_backLocator));
            return _driver.FindElement(_backLocator);
        }

        /// <summary>
        /// Clicks the Back Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBack()
        {
            Console.WriteLine("Clicking Back...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_backLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Back: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Back Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBackText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_backLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Back Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBackDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_backLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_backLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Back ---

        private IWebElement FindAboutUs2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_aboutUs2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_aboutUs2Locator));
            return _driver.FindElement(_aboutUs2Locator);
        }

        /// <summary>
        /// Clicks the About us Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAboutUs2()
        {
            Console.WriteLine("Clicking AboutUs2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_aboutUs2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AboutUs2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the About us Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAboutUs2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_aboutUs2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the About us Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAboutUs2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_aboutUs2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_aboutUs2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END AboutUs2 ---

        private IWebElement FindOurServicesElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_ourServicesLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_ourServicesLocator));
            return _driver.FindElement(_ourServicesLocator);
        }

        /// <summary>
        /// Clicks the Our services Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickOurServices()
        {
            Console.WriteLine("Clicking OurServices...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_ourServicesLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking OurServices: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Our services Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetOurServicesText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_ourServicesLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Our services Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsOurServicesDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_ourServicesLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_ourServicesLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END OurServices ---

        private IWebElement FindOurServices2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_ourServices2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_ourServices2Locator));
            return _driver.FindElement(_ourServices2Locator);
        }

        /// <summary>
        /// Clicks the Our services Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickOurServices2()
        {
            Console.WriteLine("Clicking OurServices2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_ourServices2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking OurServices2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Our services Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetOurServices2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_ourServices2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Our services Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsOurServices2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_ourServices2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_ourServices2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END OurServices2 ---

        private IWebElement FindOurBeliefsAndValuesElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_ourBeliefsAndValuesLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_ourBeliefsAndValuesLocator));
            return _driver.FindElement(_ourBeliefsAndValuesLocator);
        }

        /// <summary>
        /// Clicks the Our beliefs and values Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickOurBeliefsAndValues()
        {
            Console.WriteLine("Clicking OurBeliefsAndValues...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_ourBeliefsAndValuesLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking OurBeliefsAndValues: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Our beliefs and values Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetOurBeliefsAndValuesText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_ourBeliefsAndValuesLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Our beliefs and values Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsOurBeliefsAndValuesDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_ourBeliefsAndValuesLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_ourBeliefsAndValuesLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END OurBeliefsAndValues ---

        private IWebElement FindOurBeliefsAndValues2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_ourBeliefsAndValues2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_ourBeliefsAndValues2Locator));
            return _driver.FindElement(_ourBeliefsAndValues2Locator);
        }

        /// <summary>
        /// Clicks the Our beliefs and values Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickOurBeliefsAndValues2()
        {
            Console.WriteLine("Clicking OurBeliefsAndValues2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_ourBeliefsAndValues2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking OurBeliefsAndValues2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Our beliefs and values Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetOurBeliefsAndValues2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_ourBeliefsAndValues2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Our beliefs and values Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsOurBeliefsAndValues2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_ourBeliefsAndValues2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_ourBeliefsAndValues2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END OurBeliefsAndValues2 ---

        private IWebElement FindTheQuilterFoundationElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_theQuilterFoundationLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_theQuilterFoundationLocator));
            return _driver.FindElement(_theQuilterFoundationLocator);
        }

        /// <summary>
        /// Clicks the The Quilter Foundation Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickTheQuilterFoundation()
        {
            Console.WriteLine("Clicking TheQuilterFoundation...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_theQuilterFoundationLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking TheQuilterFoundation: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the The Quilter Foundation Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetTheQuilterFoundationText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_theQuilterFoundationLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the The Quilter Foundation Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsTheQuilterFoundationDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_theQuilterFoundationLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_theQuilterFoundationLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END TheQuilterFoundation ---

        private IWebElement FindOurBusinessModelAndStrategyElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_ourBusinessModelAndStrategyLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_ourBusinessModelAndStrategyLocator));
            return _driver.FindElement(_ourBusinessModelAndStrategyLocator);
        }

        /// <summary>
        /// Clicks the Our business model and strategy Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickOurBusinessModelAndStrategy()
        {
            Console.WriteLine("Clicking OurBusinessModelAndStrategy...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_ourBusinessModelAndStrategyLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking OurBusinessModelAndStrategy: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Our business model and strategy Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetOurBusinessModelAndStrategyText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_ourBusinessModelAndStrategyLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Our business model and strategy Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsOurBusinessModelAndStrategyDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_ourBusinessModelAndStrategyLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_ourBusinessModelAndStrategyLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END OurBusinessModelAndStrategy ---

        private IWebElement FindOurBusinessModelAndStrategy2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_ourBusinessModelAndStrategy2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_ourBusinessModelAndStrategy2Locator));
            return _driver.FindElement(_ourBusinessModelAndStrategy2Locator);
        }

        /// <summary>
        /// Clicks the Our business model and strategy Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickOurBusinessModelAndStrategy2()
        {
            Console.WriteLine("Clicking OurBusinessModelAndStrategy2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_ourBusinessModelAndStrategy2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking OurBusinessModelAndStrategy2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Our business model and strategy Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetOurBusinessModelAndStrategy2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_ourBusinessModelAndStrategy2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Our business model and strategy Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsOurBusinessModelAndStrategy2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_ourBusinessModelAndStrategy2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_ourBusinessModelAndStrategy2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END OurBusinessModelAndStrategy2 ---

        private IWebElement FindQuilterLeadershipElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_quilterLeadershipLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_quilterLeadershipLocator));
            return _driver.FindElement(_quilterLeadershipLocator);
        }

        /// <summary>
        /// Clicks the Quilter leadership Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickQuilterLeadership()
        {
            Console.WriteLine("Clicking QuilterLeadership...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_quilterLeadershipLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking QuilterLeadership: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Quilter leadership Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetQuilterLeadershipText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_quilterLeadershipLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Quilter leadership Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsQuilterLeadershipDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_quilterLeadershipLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_quilterLeadershipLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END QuilterLeadership ---

        private IWebElement FindQuilterLeadership2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_quilterLeadership2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_quilterLeadership2Locator));
            return _driver.FindElement(_quilterLeadership2Locator);
        }

        /// <summary>
        /// Clicks the Quilter leadership Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickQuilterLeadership2()
        {
            Console.WriteLine("Clicking QuilterLeadership2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_quilterLeadership2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking QuilterLeadership2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Quilter leadership Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetQuilterLeadership2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_quilterLeadership2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Quilter leadership Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsQuilterLeadership2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_quilterLeadership2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_quilterLeadership2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END QuilterLeadership2 ---

        private IWebElement FindCorporateGovernanceElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_corporateGovernanceLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_corporateGovernanceLocator));
            return _driver.FindElement(_corporateGovernanceLocator);
        }

        /// <summary>
        /// Clicks the Corporate governance Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickCorporateGovernance()
        {
            Console.WriteLine("Clicking CorporateGovernance...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_corporateGovernanceLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking CorporateGovernance: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Corporate governance Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetCorporateGovernanceText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_corporateGovernanceLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Corporate governance Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsCorporateGovernanceDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_corporateGovernanceLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_corporateGovernanceLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END CorporateGovernance ---

        private IWebElement FindGovernanceFrameworkElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_governanceFrameworkLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_governanceFrameworkLocator));
            return _driver.FindElement(_governanceFrameworkLocator);
        }

        /// <summary>
        /// Clicks the Governance framework Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickGovernanceFramework()
        {
            Console.WriteLine("Clicking GovernanceFramework...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_governanceFrameworkLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking GovernanceFramework: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Governance framework Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetGovernanceFrameworkText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_governanceFrameworkLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Governance framework Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsGovernanceFrameworkDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_governanceFrameworkLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_governanceFrameworkLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END GovernanceFramework ---

        private IWebElement FindBoardResponsibilitiesElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_boardResponsibilitiesLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_boardResponsibilitiesLocator));
            return _driver.FindElement(_boardResponsibilitiesLocator);
        }

        /// <summary>
        /// Clicks the Board responsibilities Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBoardResponsibilities()
        {
            Console.WriteLine("Clicking BoardResponsibilities...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_boardResponsibilitiesLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking BoardResponsibilities: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Board responsibilities Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBoardResponsibilitiesText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_boardResponsibilitiesLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Board responsibilities Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBoardResponsibilitiesDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_boardResponsibilitiesLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_boardResponsibilitiesLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END BoardResponsibilities ---

        private IWebElement FindBoardCommitteesElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_boardCommitteesLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_boardCommitteesLocator));
            return _driver.FindElement(_boardCommitteesLocator);
        }

        /// <summary>
        /// Clicks the Board Committees Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBoardCommittees()
        {
            Console.WriteLine("Clicking BoardCommittees...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_boardCommitteesLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking BoardCommittees: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Board Committees Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBoardCommitteesText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_boardCommitteesLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Board Committees Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBoardCommitteesDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_boardCommitteesLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_boardCommitteesLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END BoardCommittees ---

        private IWebElement FindResponsibleInvestmentElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_responsibleInvestmentLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_responsibleInvestmentLocator));
            return _driver.FindElement(_responsibleInvestmentLocator);
        }

        /// <summary>
        /// Clicks the Responsible investment Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickResponsibleInvestment()
        {
            Console.WriteLine("Clicking ResponsibleInvestment...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_responsibleInvestmentLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ResponsibleInvestment: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Responsible investment Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetResponsibleInvestmentText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_responsibleInvestmentLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Responsible investment Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsResponsibleInvestmentDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_responsibleInvestmentLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_responsibleInvestmentLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ResponsibleInvestment ---

        private IWebElement FindResponsibleInvestment2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_responsibleInvestment2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_responsibleInvestment2Locator));
            return _driver.FindElement(_responsibleInvestment2Locator);
        }

        /// <summary>
        /// Clicks the Responsible investment Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickResponsibleInvestment2()
        {
            Console.WriteLine("Clicking ResponsibleInvestment2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_responsibleInvestment2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ResponsibleInvestment2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Responsible investment Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetResponsibleInvestment2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_responsibleInvestment2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Responsible investment Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsResponsibleInvestment2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_responsibleInvestment2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_responsibleInvestment2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ResponsibleInvestment2 ---

        private IWebElement FindCorporateSustainabilityElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_corporateSustainabilityLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_corporateSustainabilityLocator));
            return _driver.FindElement(_corporateSustainabilityLocator);
        }

        /// <summary>
        /// Clicks the Corporate sustainability Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickCorporateSustainability()
        {
            Console.WriteLine("Clicking CorporateSustainability...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_corporateSustainabilityLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking CorporateSustainability: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Corporate sustainability Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetCorporateSustainabilityText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_corporateSustainabilityLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Corporate sustainability Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsCorporateSustainabilityDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_corporateSustainabilityLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_corporateSustainabilityLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END CorporateSustainability ---

        private IWebElement FindReportsAndStatementsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_reportsAndStatementsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_reportsAndStatementsLocator));
            return _driver.FindElement(_reportsAndStatementsLocator);
        }

        /// <summary>
        /// Clicks the Reports and statements Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickReportsAndStatements()
        {
            Console.WriteLine("Clicking ReportsAndStatements...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_reportsAndStatementsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ReportsAndStatements: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Reports and statements Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetReportsAndStatementsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_reportsAndStatementsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Reports and statements Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsReportsAndStatementsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_reportsAndStatementsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_reportsAndStatementsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ReportsAndStatements ---

        private IWebElement FindReportsAndStatements2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_reportsAndStatements2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_reportsAndStatements2Locator));
            return _driver.FindElement(_reportsAndStatements2Locator);
        }

        /// <summary>
        /// Clicks the Reports and statements Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickReportsAndStatements2()
        {
            Console.WriteLine("Clicking ReportsAndStatements2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_reportsAndStatements2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ReportsAndStatements2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Reports and statements Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetReportsAndStatements2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_reportsAndStatements2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Reports and statements Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsReportsAndStatements2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_reportsAndStatements2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_reportsAndStatements2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ReportsAndStatements2 ---

        private IWebElement FindInvestorRelationsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_investorRelationsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_investorRelationsLocator));
            return _driver.FindElement(_investorRelationsLocator);
        }

        /// <summary>
        /// Clicks the Investor relations Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickInvestorRelations()
        {
            Console.WriteLine("Clicking InvestorRelations...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_investorRelationsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking InvestorRelations: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Investor relations Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetInvestorRelationsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_investorRelationsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Investor relations Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsInvestorRelationsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_investorRelationsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_investorRelationsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END InvestorRelations ---

        private IWebElement FindBack2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_back2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_back2Locator));
            return _driver.FindElement(_back2Locator);
        }

        /// <summary>
        /// Clicks the Back Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBack2()
        {
            Console.WriteLine("Clicking Back2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_back2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Back2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Back Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBack2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_back2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Back Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBack2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_back2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_back2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Back2 ---

        private IWebElement FindInvestorRelations2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_investorRelations2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_investorRelations2Locator));
            return _driver.FindElement(_investorRelations2Locator);
        }

        /// <summary>
        /// Clicks the Investor relations Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickInvestorRelations2()
        {
            Console.WriteLine("Clicking InvestorRelations2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_investorRelations2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking InvestorRelations2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Investor relations Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetInvestorRelations2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_investorRelations2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Investor relations Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsInvestorRelations2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_investorRelations2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_investorRelations2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END InvestorRelations2 ---

        private IWebElement FindStockExchangeAnnouncementsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_stockExchangeAnnouncementsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_stockExchangeAnnouncementsLocator));
            return _driver.FindElement(_stockExchangeAnnouncementsLocator);
        }

        /// <summary>
        /// Clicks the Stock Exchange Announcements Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickStockExchangeAnnouncements()
        {
            Console.WriteLine("Clicking StockExchangeAnnouncements...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_stockExchangeAnnouncementsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking StockExchangeAnnouncements: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Stock Exchange Announcements Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetStockExchangeAnnouncementsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_stockExchangeAnnouncementsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Stock Exchange Announcements Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsStockExchangeAnnouncementsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_stockExchangeAnnouncementsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_stockExchangeAnnouncementsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END StockExchangeAnnouncements ---

        private IWebElement FindStockExchangeAnnouncements2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_stockExchangeAnnouncements2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_stockExchangeAnnouncements2Locator));
            return _driver.FindElement(_stockExchangeAnnouncements2Locator);
        }

        /// <summary>
        /// Clicks the Stock Exchange Announcements Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickStockExchangeAnnouncements2()
        {
            Console.WriteLine("Clicking StockExchangeAnnouncements2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_stockExchangeAnnouncements2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking StockExchangeAnnouncements2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Stock Exchange Announcements Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetStockExchangeAnnouncements2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_stockExchangeAnnouncements2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Stock Exchange Announcements Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsStockExchangeAnnouncements2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_stockExchangeAnnouncements2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_stockExchangeAnnouncements2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END StockExchangeAnnouncements2 ---

        private IWebElement FindResultsReportsAndEventsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_resultsReportsAndEventsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_resultsReportsAndEventsLocator));
            return _driver.FindElement(_resultsReportsAndEventsLocator);
        }

        /// <summary>
        /// Clicks the Results, reports and events Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickResultsReportsAndEvents()
        {
            Console.WriteLine("Clicking ResultsReportsAndEvents...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_resultsReportsAndEventsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ResultsReportsAndEvents: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Results, reports and events Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetResultsReportsAndEventsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_resultsReportsAndEventsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Results, reports and events Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsResultsReportsAndEventsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_resultsReportsAndEventsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_resultsReportsAndEventsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ResultsReportsAndEvents ---

        private IWebElement FindFinancialCalendarElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_financialCalendarLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_financialCalendarLocator));
            return _driver.FindElement(_financialCalendarLocator);
        }

        /// <summary>
        /// Clicks the Financial calendar Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickFinancialCalendar()
        {
            Console.WriteLine("Clicking FinancialCalendar...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_financialCalendarLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking FinancialCalendar: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Financial calendar Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetFinancialCalendarText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_financialCalendarLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Financial calendar Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsFinancialCalendarDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_financialCalendarLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_financialCalendarLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END FinancialCalendar ---

        private IWebElement FindResultsAndPresentationsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_resultsAndPresentationsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_resultsAndPresentationsLocator));
            return _driver.FindElement(_resultsAndPresentationsLocator);
        }

        /// <summary>
        /// Clicks the Results and presentations Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickResultsAndPresentations()
        {
            Console.WriteLine("Clicking ResultsAndPresentations...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_resultsAndPresentationsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ResultsAndPresentations: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Results and presentations Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetResultsAndPresentationsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_resultsAndPresentationsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Results and presentations Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsResultsAndPresentationsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_resultsAndPresentationsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_resultsAndPresentationsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ResultsAndPresentations ---

        private IWebElement FindAnnualReportElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_annualReportLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_annualReportLocator));
            return _driver.FindElement(_annualReportLocator);
        }

        /// <summary>
        /// Clicks the Annual report Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAnnualReport()
        {
            Console.WriteLine("Clicking AnnualReport...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_annualReportLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AnnualReport: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Annual report Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAnnualReportText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_annualReportLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Annual report Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAnnualReportDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_annualReportLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_annualReportLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END AnnualReport ---

        private IWebElement FindAnnualReportsArchiveElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_annualReportsArchiveLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_annualReportsArchiveLocator));
            return _driver.FindElement(_annualReportsArchiveLocator);
        }

        /// <summary>
        /// Clicks the Annual reports archive Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAnnualReportsArchive()
        {
            Console.WriteLine("Clicking AnnualReportsArchive...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_annualReportsArchiveLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AnnualReportsArchive: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Annual reports archive Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAnnualReportsArchiveText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_annualReportsArchiveLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Annual reports archive Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAnnualReportsArchiveDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_annualReportsArchiveLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_annualReportsArchiveLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END AnnualReportsArchive ---

        private IWebElement FindRegulatoryReportsAndCompanyDisclosuresElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_regulatoryReportsAndCompanyDisclosuresLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_regulatoryReportsAndCompanyDisclosuresLocator));
            return _driver.FindElement(_regulatoryReportsAndCompanyDisclosuresLocator);
        }

        /// <summary>
        /// Clicks the Regulatory reports and company disclosures Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickRegulatoryReportsAndCompanyDisclosures()
        {
            Console.WriteLine("Clicking RegulatoryReportsAndCompanyDisclosures...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_regulatoryReportsAndCompanyDisclosuresLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking RegulatoryReportsAndCompanyDisclosures: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Regulatory reports and company disclosures Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetRegulatoryReportsAndCompanyDisclosuresText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_regulatoryReportsAndCompanyDisclosuresLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Regulatory reports and company disclosures Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsRegulatoryReportsAndCompanyDisclosuresDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_regulatoryReportsAndCompanyDisclosuresLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_regulatoryReportsAndCompanyDisclosuresLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END RegulatoryReportsAndCompanyDisclosures ---

        private IWebElement FindProspectusAndSupportingDocumentationElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_prospectusAndSupportingDocumentationLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_prospectusAndSupportingDocumentationLocator));
            return _driver.FindElement(_prospectusAndSupportingDocumentationLocator);
        }

        /// <summary>
        /// Clicks the Prospectus and supporting documentation Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickProspectusAndSupportingDocumentation()
        {
            Console.WriteLine("Clicking ProspectusAndSupportingDocumentation...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_prospectusAndSupportingDocumentationLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ProspectusAndSupportingDocumentation: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Prospectus and supporting documentation Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetProspectusAndSupportingDocumentationText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_prospectusAndSupportingDocumentationLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Prospectus and supporting documentation Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsProspectusAndSupportingDocumentationDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_prospectusAndSupportingDocumentationLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_prospectusAndSupportingDocumentationLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ProspectusAndSupportingDocumentation ---

        private IWebElement FindAnalystCoverageAndConsensusElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_analystCoverageAndConsensusLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_analystCoverageAndConsensusLocator));
            return _driver.FindElement(_analystCoverageAndConsensusLocator);
        }

        /// <summary>
        /// Clicks the Analyst coverage and consensus Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAnalystCoverageAndConsensus()
        {
            Console.WriteLine("Clicking AnalystCoverageAndConsensus...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_analystCoverageAndConsensusLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AnalystCoverageAndConsensus: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Analyst coverage and consensus Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAnalystCoverageAndConsensusText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_analystCoverageAndConsensusLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Analyst coverage and consensus Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAnalystCoverageAndConsensusDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_analystCoverageAndConsensusLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_analystCoverageAndConsensusLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END AnalystCoverageAndConsensus ---

        private IWebElement FindAnalystCoverageAndConsensus2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_analystCoverageAndConsensus2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_analystCoverageAndConsensus2Locator));
            return _driver.FindElement(_analystCoverageAndConsensus2Locator);
        }

        /// <summary>
        /// Clicks the Analyst coverage and consensus Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAnalystCoverageAndConsensus2()
        {
            Console.WriteLine("Clicking AnalystCoverageAndConsensus2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_analystCoverageAndConsensus2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AnalystCoverageAndConsensus2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Analyst coverage and consensus Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAnalystCoverageAndConsensus2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_analystCoverageAndConsensus2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Analyst coverage and consensus Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAnalystCoverageAndConsensus2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_analystCoverageAndConsensus2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_analystCoverageAndConsensus2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END AnalystCoverageAndConsensus2 ---

        private IWebElement FindShareholderCentreElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_shareholderCentreLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_shareholderCentreLocator));
            return _driver.FindElement(_shareholderCentreLocator);
        }

        /// <summary>
        /// Clicks the Shareholder centre Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickShareholderCentre()
        {
            Console.WriteLine("Clicking ShareholderCentre...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_shareholderCentreLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ShareholderCentre: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Shareholder centre Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetShareholderCentreText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_shareholderCentreLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Shareholder centre Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsShareholderCentreDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_shareholderCentreLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_shareholderCentreLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ShareholderCentre ---

        private IWebElement FindShareholderCentre2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_shareholderCentre2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_shareholderCentre2Locator));
            return _driver.FindElement(_shareholderCentre2Locator);
        }

        /// <summary>
        /// Clicks the Shareholder centre Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickShareholderCentre2()
        {
            Console.WriteLine("Clicking ShareholderCentre2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_shareholderCentre2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ShareholderCentre2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Shareholder centre Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetShareholderCentre2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_shareholderCentre2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Shareholder centre Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsShareholderCentre2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_shareholderCentre2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_shareholderCentre2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ShareholderCentre2 ---

        private IWebElement FindAboutQuilterPlcSharesElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_aboutQuilterPlcSharesLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_aboutQuilterPlcSharesLocator));
            return _driver.FindElement(_aboutQuilterPlcSharesLocator);
        }

        /// <summary>
        /// Clicks the About Quilter plc shares Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAboutQuilterPlcShares()
        {
            Console.WriteLine("Clicking AboutQuilterPlcShares...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_aboutQuilterPlcSharesLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AboutQuilterPlcShares: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the About Quilter plc shares Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAboutQuilterPlcSharesText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_aboutQuilterPlcSharesLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the About Quilter plc shares Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAboutQuilterPlcSharesDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_aboutQuilterPlcSharesLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_aboutQuilterPlcSharesLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END AboutQuilterPlcShares ---

        private IWebElement FindSharePriceToolsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_sharePriceToolsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_sharePriceToolsLocator));
            return _driver.FindElement(_sharePriceToolsLocator);
        }

        /// <summary>
        /// Clicks the Share price tools Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSharePriceTools()
        {
            Console.WriteLine("Clicking SharePriceTools...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_sharePriceToolsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking SharePriceTools: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Share price tools Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSharePriceToolsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_sharePriceToolsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Share price tools Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSharePriceToolsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_sharePriceToolsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_sharePriceToolsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END SharePriceTools ---

        private IWebElement FindDividendsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_dividendsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_dividendsLocator));
            return _driver.FindElement(_dividendsLocator);
        }

        /// <summary>
        /// Clicks the Dividends Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickDividends()
        {
            Console.WriteLine("Clicking Dividends...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_dividendsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Dividends: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Dividends Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetDividendsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_dividendsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Dividends Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsDividendsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_dividendsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_dividendsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Dividends ---

        private IWebElement FindGeneralMeetingHubElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_generalMeetingHubLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_generalMeetingHubLocator));
            return _driver.FindElement(_generalMeetingHubLocator);
        }

        /// <summary>
        /// Clicks the General Meeting Hub Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickGeneralMeetingHub()
        {
            Console.WriteLine("Clicking GeneralMeetingHub...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_generalMeetingHubLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking GeneralMeetingHub: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the General Meeting Hub Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetGeneralMeetingHubText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_generalMeetingHubLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the General Meeting Hub Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsGeneralMeetingHubDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_generalMeetingHubLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_generalMeetingHubLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END GeneralMeetingHub ---

        private IWebElement FindFrequentlyAskedQuestionsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_frequentlyAskedQuestionsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_frequentlyAskedQuestionsLocator));
            return _driver.FindElement(_frequentlyAskedQuestionsLocator);
        }

        /// <summary>
        /// Clicks the Frequently asked questions Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickFrequentlyAskedQuestions()
        {
            Console.WriteLine("Clicking FrequentlyAskedQuestions...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_frequentlyAskedQuestionsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking FrequentlyAskedQuestions: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Frequently asked questions Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetFrequentlyAskedQuestionsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_frequentlyAskedQuestionsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Frequently asked questions Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsFrequentlyAskedQuestionsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_frequentlyAskedQuestionsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_frequentlyAskedQuestionsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END FrequentlyAskedQuestions ---

        private IWebElement FindRegistrarContactInformationElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_registrarContactInformationLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_registrarContactInformationLocator));
            return _driver.FindElement(_registrarContactInformationLocator);
        }

        /// <summary>
        /// Clicks the Registrar contact information Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickRegistrarContactInformation()
        {
            Console.WriteLine("Clicking RegistrarContactInformation...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_registrarContactInformationLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking RegistrarContactInformation: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Registrar contact information Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetRegistrarContactInformationText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_registrarContactInformationLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Registrar contact information Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsRegistrarContactInformationDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_registrarContactInformationLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_registrarContactInformationLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END RegistrarContactInformation ---

        private IWebElement FindManageYourShareholdingElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_manageYourShareholdingLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_manageYourShareholdingLocator));
            return _driver.FindElement(_manageYourShareholdingLocator);
        }

        /// <summary>
        /// Clicks the Manage your shareholding Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickManageYourShareholding()
        {
            Console.WriteLine("Clicking ManageYourShareholding...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_manageYourShareholdingLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ManageYourShareholding: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Manage your shareholding Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetManageYourShareholdingText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_manageYourShareholdingLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Manage your shareholding Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsManageYourShareholdingDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_manageYourShareholdingLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_manageYourShareholdingLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ManageYourShareholding ---

        private IWebElement FindOddLotOffersElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_oddLotOffersLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_oddLotOffersLocator));
            return _driver.FindElement(_oddLotOffersLocator);
        }

        /// <summary>
        /// Clicks the Odd-lot Offers Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickOddLotOffers()
        {
            Console.WriteLine("Clicking OddLotOffers...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_oddLotOffersLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking OddLotOffers: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Odd-lot Offers Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetOddLotOffersText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_oddLotOffersLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Odd-lot Offers Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsOddLotOffersDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_oddLotOffersLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_oddLotOffersLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END OddLotOffers ---

        private IWebElement FindReturnOfCapital2022Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_returnOfCapital2022Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_returnOfCapital2022Locator));
            return _driver.FindElement(_returnOfCapital2022Locator);
        }

        /// <summary>
        /// Clicks the Return of Capital 2022 Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickReturnOfCapital2022()
        {
            Console.WriteLine("Clicking ReturnOfCapital2022...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_returnOfCapital2022Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ReturnOfCapital2022: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Return of Capital 2022 Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetReturnOfCapital2022Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_returnOfCapital2022Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Return of Capital 2022 Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsReturnOfCapital2022Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_returnOfCapital2022Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_returnOfCapital2022Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ReturnOfCapital2022 ---

        private IWebElement FindDebtHolderCentreElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_debtHolderCentreLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_debtHolderCentreLocator));
            return _driver.FindElement(_debtHolderCentreLocator);
        }

        /// <summary>
        /// Clicks the Debt holder centre Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickDebtHolderCentre()
        {
            Console.WriteLine("Clicking DebtHolderCentre...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_debtHolderCentreLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking DebtHolderCentre: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Debt holder centre Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetDebtHolderCentreText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_debtHolderCentreLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Debt holder centre Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsDebtHolderCentreDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_debtHolderCentreLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_debtHolderCentreLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END DebtHolderCentre ---

        private IWebElement FindDebtHolderCentre2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_debtHolderCentre2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_debtHolderCentre2Locator));
            return _driver.FindElement(_debtHolderCentre2Locator);
        }

        /// <summary>
        /// Clicks the Debt holder centre Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickDebtHolderCentre2()
        {
            Console.WriteLine("Clicking DebtHolderCentre2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_debtHolderCentre2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking DebtHolderCentre2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Debt holder centre Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetDebtHolderCentre2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_debtHolderCentre2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Debt holder centre Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsDebtHolderCentre2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_debtHolderCentre2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_debtHolderCentre2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END DebtHolderCentre2 ---

        private IWebElement FindShareBuyback20202022Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_shareBuyback20202022Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_shareBuyback20202022Locator));
            return _driver.FindElement(_shareBuyback20202022Locator);
        }

        /// <summary>
        /// Clicks the Share buyback 2020 - 2022 Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickShareBuyback20202022()
        {
            Console.WriteLine("Clicking ShareBuyback20202022...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_shareBuyback20202022Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ShareBuyback20202022: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Share buyback 2020 - 2022 Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetShareBuyback20202022Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_shareBuyback20202022Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Share buyback 2020 - 2022 Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsShareBuyback20202022Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_shareBuyback20202022Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_shareBuyback20202022Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ShareBuyback20202022 ---

        private IWebElement FindShareBuyback202020222Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_shareBuyback202020222Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_shareBuyback202020222Locator));
            return _driver.FindElement(_shareBuyback202020222Locator);
        }

        /// <summary>
        /// Clicks the Share buyback 2020 - 2022 Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickShareBuyback202020222()
        {
            Console.WriteLine("Clicking ShareBuyback202020222...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_shareBuyback202020222Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ShareBuyback202020222: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Share buyback 2020 - 2022 Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetShareBuyback202020222Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_shareBuyback202020222Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Share buyback 2020 - 2022 Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsShareBuyback202020222Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_shareBuyback202020222Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_shareBuyback202020222Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ShareBuyback202020222 ---

        private IWebElement FindMediaCentreElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_mediaCentreLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_mediaCentreLocator));
            return _driver.FindElement(_mediaCentreLocator);
        }

        /// <summary>
        /// Clicks the Media centre Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickMediaCentre()
        {
            Console.WriteLine("Clicking MediaCentre...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_mediaCentreLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking MediaCentre: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Media centre Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetMediaCentreText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_mediaCentreLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Media centre Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsMediaCentreDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_mediaCentreLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_mediaCentreLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END MediaCentre ---

        private IWebElement FindBack3Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_back3Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_back3Locator));
            return _driver.FindElement(_back3Locator);
        }

        /// <summary>
        /// Clicks the Back Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBack3()
        {
            Console.WriteLine("Clicking Back3...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_back3Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Back3: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Back Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBack3Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_back3Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Back Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBack3Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_back3Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_back3Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Back3 ---

        private IWebElement FindMediaCentre2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_mediaCentre2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_mediaCentre2Locator));
            return _driver.FindElement(_mediaCentre2Locator);
        }

        /// <summary>
        /// Clicks the Media centre Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickMediaCentre2()
        {
            Console.WriteLine("Clicking MediaCentre2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_mediaCentre2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking MediaCentre2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Media centre Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetMediaCentre2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_mediaCentre2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Media centre Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsMediaCentre2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_mediaCentre2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_mediaCentre2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END MediaCentre2 ---

        private IWebElement FindCareersElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_careersLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_careersLocator));
            return _driver.FindElement(_careersLocator);
        }

        /// <summary>
        /// Clicks the Careers Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickCareers()
        {
            Console.WriteLine("Clicking Careers...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_careersLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Careers: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Careers Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetCareersText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_careersLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Careers Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsCareersDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_careersLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_careersLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Careers ---

        private IWebElement FindBack4Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_back4Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_back4Locator));
            return _driver.FindElement(_back4Locator);
        }

        /// <summary>
        /// Clicks the Back Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBack4()
        {
            Console.WriteLine("Clicking Back4...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_back4Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Back4: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Back Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBack4Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_back4Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Back Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBack4Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_back4Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_back4Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Back4 ---

        private IWebElement FindCareers2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_careers2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_careers2Locator));
            return _driver.FindElement(_careers2Locator);
        }

        /// <summary>
        /// Clicks the Careers Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickCareers2()
        {
            Console.WriteLine("Clicking Careers2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_careers2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Careers2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Careers Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetCareers2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_careers2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Careers Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsCareers2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_careers2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_careers2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Careers2 ---

        private IWebElement FindContactUsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_contactUsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_contactUsLocator));
            return _driver.FindElement(_contactUsLocator);
        }

        /// <summary>
        /// Clicks the Contact us Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickContactUs()
        {
            Console.WriteLine("Clicking ContactUs...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_contactUsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ContactUs: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Contact us Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetContactUsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_contactUsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Contact us Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsContactUsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_contactUsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_contactUsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ContactUs ---

        private IWebElement FindBack5Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_back5Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_back5Locator));
            return _driver.FindElement(_back5Locator);
        }

        /// <summary>
        /// Clicks the Back Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBack5()
        {
            Console.WriteLine("Clicking Back5...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_back5Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Back5: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Back Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBack5Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_back5Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Back Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBack5Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_back5Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_back5Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Back5 ---

        private IWebElement FindContactUs2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_contactUs2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_contactUs2Locator));
            return _driver.FindElement(_contactUs2Locator);
        }

        /// <summary>
        /// Clicks the Contact us Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickContactUs2()
        {
            Console.WriteLine("Clicking ContactUs2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_contactUs2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ContactUs2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Contact us Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetContactUs2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_contactUs2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Contact us Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsContactUs2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_contactUs2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_contactUs2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ContactUs2 ---

        private IWebElement FindShareholdersElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_shareholdersLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_shareholdersLocator));
            return _driver.FindElement(_shareholdersLocator);
        }

        /// <summary>
        /// Clicks the Shareholders Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickShareholders()
        {
            Console.WriteLine("Clicking Shareholders...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_shareholdersLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Shareholders: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Shareholders Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetShareholdersText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_shareholdersLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Shareholders Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsShareholdersDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_shareholdersLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_shareholdersLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Shareholders ---

        private IWebElement FindShareholders2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_shareholders2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_shareholders2Locator));
            return _driver.FindElement(_shareholders2Locator);
        }

        /// <summary>
        /// Clicks the Shareholders Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickShareholders2()
        {
            Console.WriteLine("Clicking Shareholders2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_shareholders2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Shareholders2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Shareholders Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetShareholders2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_shareholders2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Shareholders Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsShareholders2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_shareholders2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_shareholders2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Shareholders2 ---

        private IWebElement FindAnalystOrInstitutionalInvestorElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_analystOrInstitutionalInvestorLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_analystOrInstitutionalInvestorLocator));
            return _driver.FindElement(_analystOrInstitutionalInvestorLocator);
        }

        /// <summary>
        /// Clicks the Analyst or institutional investor Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAnalystOrInstitutionalInvestor()
        {
            Console.WriteLine("Clicking AnalystOrInstitutionalInvestor...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_analystOrInstitutionalInvestorLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AnalystOrInstitutionalInvestor: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Analyst or institutional investor Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAnalystOrInstitutionalInvestorText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_analystOrInstitutionalInvestorLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Analyst or institutional investor Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAnalystOrInstitutionalInvestorDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_analystOrInstitutionalInvestorLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_analystOrInstitutionalInvestorLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END AnalystOrInstitutionalInvestor ---

        private IWebElement FindAnalystOrInstitutionalInvestor2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_analystOrInstitutionalInvestor2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_analystOrInstitutionalInvestor2Locator));
            return _driver.FindElement(_analystOrInstitutionalInvestor2Locator);
        }

        /// <summary>
        /// Clicks the Analyst or institutional investor Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAnalystOrInstitutionalInvestor2()
        {
            Console.WriteLine("Clicking AnalystOrInstitutionalInvestor2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_analystOrInstitutionalInvestor2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AnalystOrInstitutionalInvestor2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Analyst or institutional investor Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAnalystOrInstitutionalInvestor2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_analystOrInstitutionalInvestor2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Analyst or institutional investor Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAnalystOrInstitutionalInvestor2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_analystOrInstitutionalInvestor2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_analystOrInstitutionalInvestor2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END AnalystOrInstitutionalInvestor2 ---

        private IWebElement FindCustomerOrAdviserElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_customerOrAdviserLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_customerOrAdviserLocator));
            return _driver.FindElement(_customerOrAdviserLocator);
        }

        /// <summary>
        /// Clicks the Customer or adviser Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickCustomerOrAdviser()
        {
            Console.WriteLine("Clicking CustomerOrAdviser...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_customerOrAdviserLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking CustomerOrAdviser: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Customer or adviser Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetCustomerOrAdviserText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_customerOrAdviserLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Customer or adviser Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsCustomerOrAdviserDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_customerOrAdviserLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_customerOrAdviserLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END CustomerOrAdviser ---

        private IWebElement FindCustomerOrAdviser2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_customerOrAdviser2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_customerOrAdviser2Locator));
            return _driver.FindElement(_customerOrAdviser2Locator);
        }

        /// <summary>
        /// Clicks the Customer or adviser Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickCustomerOrAdviser2()
        {
            Console.WriteLine("Clicking CustomerOrAdviser2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_customerOrAdviser2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking CustomerOrAdviser2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Customer or adviser Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetCustomerOrAdviser2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_customerOrAdviser2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Customer or adviser Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsCustomerOrAdviser2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_customerOrAdviser2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_customerOrAdviser2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END CustomerOrAdviser2 ---

        private IWebElement FindOtherBusinessAreasElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_otherBusinessAreasLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_otherBusinessAreasLocator));
            return _driver.FindElement(_otherBusinessAreasLocator);
        }

        /// <summary>
        /// Clicks the Other business areas Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickOtherBusinessAreas()
        {
            Console.WriteLine("Clicking OtherBusinessAreas...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_otherBusinessAreasLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking OtherBusinessAreas: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Other business areas Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetOtherBusinessAreasText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_otherBusinessAreasLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Other business areas Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsOtherBusinessAreasDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_otherBusinessAreasLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_otherBusinessAreasLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END OtherBusinessAreas ---

        private IWebElement FindHumanResourcesElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_humanResourcesLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_humanResourcesLocator));
            return _driver.FindElement(_humanResourcesLocator);
        }

        /// <summary>
        /// Clicks the Human resources Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickHumanResources()
        {
            Console.WriteLine("Clicking HumanResources...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_humanResourcesLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking HumanResources: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Human resources Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetHumanResourcesText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_humanResourcesLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Human resources Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsHumanResourcesDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_humanResourcesLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_humanResourcesLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END HumanResources ---

        private IWebElement FindProcurementAndSupplierManagementElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_procurementAndSupplierManagementLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_procurementAndSupplierManagementLocator));
            return _driver.FindElement(_procurementAndSupplierManagementLocator);
        }

        /// <summary>
        /// Clicks the Procurement and supplier management Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickProcurementAndSupplierManagement()
        {
            Console.WriteLine("Clicking ProcurementAndSupplierManagement...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_procurementAndSupplierManagementLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ProcurementAndSupplierManagement: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Procurement and supplier management Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetProcurementAndSupplierManagementText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_procurementAndSupplierManagementLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Procurement and supplier management Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsProcurementAndSupplierManagementDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_procurementAndSupplierManagementLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_procurementAndSupplierManagementLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ProcurementAndSupplierManagement ---

        private IWebElement FindQuilterFinancialAdviserSchoolElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_quilterFinancialAdviserSchoolLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_quilterFinancialAdviserSchoolLocator));
            return _driver.FindElement(_quilterFinancialAdviserSchoolLocator);
        }

        /// <summary>
        /// Clicks the Quilter Financial Adviser School Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickQuilterFinancialAdviserSchool()
        {
            Console.WriteLine("Clicking QuilterFinancialAdviserSchool...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_quilterFinancialAdviserSchoolLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking QuilterFinancialAdviserSchool: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Quilter Financial Adviser School Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetQuilterFinancialAdviserSchoolText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_quilterFinancialAdviserSchoolLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Quilter Financial Adviser School Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsQuilterFinancialAdviserSchoolDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_quilterFinancialAdviserSchoolLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_quilterFinancialAdviserSchoolLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END QuilterFinancialAdviserSchool ---

        private IWebElement FindQuilterPlcElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_quilterPlcLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_quilterPlcLocator));
            return _driver.FindElement(_quilterPlcLocator);
        }

        /// <summary>
        /// Clicks the Quilter plc Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickQuilterPlc()
        {
            Console.WriteLine("Clicking QuilterPlc...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_quilterPlcLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking QuilterPlc: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Quilter plc Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetQuilterPlcText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_quilterPlcLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Quilter plc Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsQuilterPlcDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_quilterPlcLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_quilterPlcLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END QuilterPlc ---

        private IWebElement FindAboutUs3Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_aboutUs3Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_aboutUs3Locator));
            return _driver.FindElement(_aboutUs3Locator);
        }

        /// <summary>
        /// Clicks the About us Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAboutUs3()
        {
            Console.WriteLine("Clicking AboutUs3...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_aboutUs3Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AboutUs3: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the About us Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAboutUs3Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_aboutUs3Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the About us Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAboutUs3Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_aboutUs3Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_aboutUs3Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END AboutUs3 ---

        private IWebElement FindQuilterCheviotElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_quilterCheviotLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_quilterCheviotLocator));
            return _driver.FindElement(_quilterCheviotLocator);
        }

        /// <summary>
        /// Clicks the Quilter Cheviot Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickQuilterCheviot()
        {
            Console.WriteLine("Clicking QuilterCheviot...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_quilterCheviotLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking QuilterCheviot: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Quilter Cheviot Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetQuilterCheviotText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_quilterCheviotLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Quilter Cheviot Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsQuilterCheviotDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_quilterCheviotLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_quilterCheviotLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END QuilterCheviot ---

        private IWebElement FindQuilterCheviotFinancialPlanningElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_quilterCheviotFinancialPlanningLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_quilterCheviotFinancialPlanningLocator));
            return _driver.FindElement(_quilterCheviotFinancialPlanningLocator);
        }

        /// <summary>
        /// Clicks the Quilter Cheviot Financial Planning Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickQuilterCheviotFinancialPlanning()
        {
            Console.WriteLine("Clicking QuilterCheviotFinancialPlanning...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_quilterCheviotFinancialPlanningLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking QuilterCheviotFinancialPlanning: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Quilter Cheviot Financial Planning Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetQuilterCheviotFinancialPlanningText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_quilterCheviotFinancialPlanningLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Quilter Cheviot Financial Planning Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsQuilterCheviotFinancialPlanningDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_quilterCheviotFinancialPlanningLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_quilterCheviotFinancialPlanningLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END QuilterCheviotFinancialPlanning ---

        private IWebElement FindQuilterFinancialPlanningElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_quilterFinancialPlanningLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_quilterFinancialPlanningLocator));
            return _driver.FindElement(_quilterFinancialPlanningLocator);
        }

        /// <summary>
        /// Clicks the Quilter Financial Planning Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickQuilterFinancialPlanning()
        {
            Console.WriteLine("Clicking QuilterFinancialPlanning...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_quilterFinancialPlanningLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking QuilterFinancialPlanning: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Quilter Financial Planning Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetQuilterFinancialPlanningText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_quilterFinancialPlanningLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Quilter Financial Planning Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsQuilterFinancialPlanningDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_quilterFinancialPlanningLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_quilterFinancialPlanningLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END QuilterFinancialPlanning ---

        private IWebElement FindQuilterInvestmentPlatformElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_quilterInvestmentPlatformLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_quilterInvestmentPlatformLocator));
            return _driver.FindElement(_quilterInvestmentPlatformLocator);
        }

        /// <summary>
        /// Clicks the Quilter investment platform Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickQuilterInvestmentPlatform()
        {
            Console.WriteLine("Clicking QuilterInvestmentPlatform...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_quilterInvestmentPlatformLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking QuilterInvestmentPlatform: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Quilter investment platform Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetQuilterInvestmentPlatformText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_quilterInvestmentPlatformLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Quilter investment platform Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsQuilterInvestmentPlatformDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_quilterInvestmentPlatformLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_quilterInvestmentPlatformLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END QuilterInvestmentPlatform ---

        private IWebElement FindQuilterInvestorsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_quilterInvestorsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_quilterInvestorsLocator));
            return _driver.FindElement(_quilterInvestorsLocator);
        }

        /// <summary>
        /// Clicks the Quilter Investors Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickQuilterInvestors()
        {
            Console.WriteLine("Clicking QuilterInvestors...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_quilterInvestorsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking QuilterInvestors: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Quilter Investors Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetQuilterInvestorsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_quilterInvestorsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Quilter Investors Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsQuilterInvestorsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_quilterInvestorsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_quilterInvestorsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END QuilterInvestors ---

        private IWebElement FindStrategyElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_strategyLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_strategyLocator));
            return _driver.FindElement(_strategyLocator);
        }

        /// <summary>
        /// Clicks the strategy Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickStrategy()
        {
            Console.WriteLine("Clicking Strategy...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_strategyLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Strategy: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the strategy Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetStrategyText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_strategyLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the strategy Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsStrategyDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_strategyLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_strategyLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Strategy ---

        private IWebElement FindLink3Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_link3Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_link3Locator));
            return _driver.FindElement(_link3Locator);
        }

        /// <summary>
        /// Clicks the Link Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickLink3()
        {
            Console.WriteLine("Clicking Link3...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_link3Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Link3: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Link Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetLink3Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_link3Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Link Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsLink3Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_link3Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_link3Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Link3 ---

        private IWebElement FindLiteratureLibraryElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_literatureLibraryLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_literatureLibraryLocator));
            return _driver.FindElement(_literatureLibraryLocator);
        }

        /// <summary>
        /// Clicks the Literature library Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickLiteratureLibrary()
        {
            Console.WriteLine("Clicking LiteratureLibrary...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_literatureLibraryLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking LiteratureLibrary: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Literature library Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetLiteratureLibraryText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_literatureLibraryLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Literature library Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsLiteratureLibraryDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_literatureLibraryLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_literatureLibraryLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END LiteratureLibrary ---

        private IWebElement FindQuiltercomElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_quiltercomLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_quiltercomLocator));
            return _driver.FindElement(_quiltercomLocator);
        }

        /// <summary>
        /// Clicks the Quilter.com Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickQuiltercom()
        {
            Console.WriteLine("Clicking Quiltercom...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_quiltercomLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Quiltercom: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Quilter.com Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetQuiltercomText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_quiltercomLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Quilter.com Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsQuiltercomDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_quiltercomLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_quiltercomLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Quiltercom ---

        private IWebElement FindContactUs3Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_contactUs3Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_contactUs3Locator));
            return _driver.FindElement(_contactUs3Locator);
        }

        /// <summary>
        /// Clicks the Contact us Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickContactUs3()
        {
            Console.WriteLine("Clicking ContactUs3...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_contactUs3Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ContactUs3: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Contact us Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetContactUs3Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_contactUs3Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Contact us Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsContactUs3Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_contactUs3Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_contactUs3Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ContactUs3 ---

        private IWebElement FindTermsOfUseElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_termsOfUseLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_termsOfUseLocator));
            return _driver.FindElement(_termsOfUseLocator);
        }

        /// <summary>
        /// Clicks the Terms of use Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickTermsOfUse()
        {
            Console.WriteLine("Clicking TermsOfUse...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_termsOfUseLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking TermsOfUse: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Terms of use Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetTermsOfUseText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_termsOfUseLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Terms of use Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsTermsOfUseDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_termsOfUseLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_termsOfUseLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END TermsOfUse ---

        private IWebElement FindPrivacyNoticeElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_privacyNoticeLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_privacyNoticeLocator));
            return _driver.FindElement(_privacyNoticeLocator);
        }

        /// <summary>
        /// Clicks the Privacy notice Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickPrivacyNotice()
        {
            Console.WriteLine("Clicking PrivacyNotice...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_privacyNoticeLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking PrivacyNotice: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Privacy notice Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetPrivacyNoticeText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_privacyNoticeLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Privacy notice Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsPrivacyNoticeDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_privacyNoticeLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_privacyNoticeLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END PrivacyNotice ---

        private IWebElement FindCookieNoticeElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_cookieNoticeLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_cookieNoticeLocator));
            return _driver.FindElement(_cookieNoticeLocator);
        }

        /// <summary>
        /// Clicks the Cookie notice Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickCookieNotice()
        {
            Console.WriteLine("Clicking CookieNotice...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_cookieNoticeLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking CookieNotice: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Cookie notice Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetCookieNoticeText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_cookieNoticeLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Cookie notice Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsCookieNoticeDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_cookieNoticeLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_cookieNoticeLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END CookieNotice ---

        private IWebElement FindAccessibilityElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_accessibilityLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_accessibilityLocator));
            return _driver.FindElement(_accessibilityLocator);
        }

        /// <summary>
        /// Clicks the Accessibility Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAccessibility()
        {
            Console.WriteLine("Clicking Accessibility...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_accessibilityLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Accessibility: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Accessibility Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAccessibilityText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_accessibilityLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Accessibility Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAccessibilityDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_accessibilityLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_accessibilityLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Accessibility ---

        private IWebElement FindCorporateAndRegulatoryInformationElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_corporateAndRegulatoryInformationLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_corporateAndRegulatoryInformationLocator));
            return _driver.FindElement(_corporateAndRegulatoryInformationLocator);
        }

        /// <summary>
        /// Clicks the Corporate and Regulatory information Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickCorporateAndRegulatoryInformation()
        {
            Console.WriteLine("Clicking CorporateAndRegulatoryInformation...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_corporateAndRegulatoryInformationLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking CorporateAndRegulatoryInformation: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Corporate and Regulatory information Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetCorporateAndRegulatoryInformationText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_corporateAndRegulatoryInformationLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Corporate and Regulatory information Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsCorporateAndRegulatoryInformationDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_corporateAndRegulatoryInformationLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_corporateAndRegulatoryInformationLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END CorporateAndRegulatoryInformation ---

        private IWebElement FindSecureEmailElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_secureEmailLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_secureEmailLocator));
            return _driver.FindElement(_secureEmailLocator);
        }

        /// <summary>
        /// Clicks the Secure email Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSecureEmail()
        {
            Console.WriteLine("Clicking SecureEmail...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_secureEmailLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking SecureEmail: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Secure email Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSecureEmailText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_secureEmailLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Secure email Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSecureEmailDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_secureEmailLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_secureEmailLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END SecureEmail ---

        private IWebElement FindModernSlaveryStatementElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_modernSlaveryStatementLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_modernSlaveryStatementLocator));
            return _driver.FindElement(_modernSlaveryStatementLocator);
        }

        /// <summary>
        /// Clicks the Modern slavery statement Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickModernSlaveryStatement()
        {
            Console.WriteLine("Clicking ModernSlaveryStatement...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_modernSlaveryStatementLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ModernSlaveryStatement: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Modern slavery statement Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetModernSlaveryStatementText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_modernSlaveryStatementLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Modern slavery statement Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsModernSlaveryStatementDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_modernSlaveryStatementLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_modernSlaveryStatementLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END ModernSlaveryStatement ---

        private IWebElement FindSuppliersElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_suppliersLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_suppliersLocator));
            return _driver.FindElement(_suppliersLocator);
        }

        /// <summary>
        /// Clicks the Suppliers Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSuppliers()
        {
            Console.WriteLine("Clicking Suppliers...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_suppliersLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Suppliers: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Suppliers Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSuppliersText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_suppliersLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Suppliers Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSuppliersDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_suppliersLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_suppliersLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Suppliers ---

        private IWebElement FindLink4Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_link4Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_link4Locator));
            return _driver.FindElement(_link4Locator);
        }

        /// <summary>
        /// Clicks the Link Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickLink4()
        {
            Console.WriteLine("Clicking Link4...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_link4Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Link4: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Link Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetLink4Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_link4Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Link Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsLink4Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_link4Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_link4Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Link4 ---

        private IWebElement FindLink5Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_link5Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_link5Locator));
            return _driver.FindElement(_link5Locator);
        }

        /// <summary>
        /// Clicks the Link Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickLink5()
        {
            Console.WriteLine("Clicking Link5...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_link5Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Link5: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Link Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetLink5Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_link5Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Link Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsLink5Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_link5Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_link5Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try {
                     return _driver.FindElement({locatorFieldName}).Displayed; 
                     }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Link5 ---

        private IWebElement FindLink6Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_link6Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_link6Locator));
            return _driver.FindElement(_link6Locator);
        }

        /// <summary>
        /// Clicks the Link Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickLink6()
        {
            Console.WriteLine("Clicking Link6...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_link6Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Link6: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Link Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetLink6Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_link6Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Link Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsLink6Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_link6Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_link6Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
        }

        // --- END Link6 ---

        // --- Helper Methods ---
        // Consider adding helper methods for common wait conditions
        // Example: Wait for AJAX calls to complete, wait for page transitions
        /*
        private void WaitForAjaxOrPageLoad(int timeoutSeconds = 15)
        {
            // This is a placeholder. Implementation depends heavily on the 
            // specific application being tested (e.g., check jQuery.active == 0,
            // wait for a loading spinner to disappear, etc.)
            try
            {
                 var jsExecutor = (IJavaScriptExecutor)_driver;
                 var wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(timeoutSeconds));
                 wait.Until(driver => jsExecutor.ExecuteScript("return document.readyState").Equals("complete"));
                 // Add more specific checks if needed, e.g., for jQuery:
                 // wait.Until(driver => (bool)jsExecutor.ExecuteScript("return (typeof jQuery !== 'undefined') && (jQuery.active === 0)"));
            }
             catch (Exception ex)
            {
                Console.Error.WriteLine($"Error during WaitForAjaxOrPageLoad: {ex.Message}");
                // Decide if this should throw or just log
            }
        }
        */

    }
}
