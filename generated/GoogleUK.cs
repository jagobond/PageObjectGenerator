// Generated by PageObjectGenerator
// Timestamp: 2025-03-27 07:32:17 UTC

using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers; // Recommended for ExpectedConditions
using System;
using System.Threading; // For Thread.Sleep if absolutely needed (try to avoid)

namespace YourProject.PageObjects
{
    /// <summary>
    /// Represents the GoogleUK page.
    /// NOTE: This is auto-generated code. Review and refine locators and methods.
    /// </summary>
    public class GoogleUK
    {
        private readonly IWebDriver _driver;
        private readonly WebDriverWait _wait;
        private readonly TimeSpan _defaultWaitTimeout = TimeSpan.FromSeconds(10);

        public GoogleUK(IWebDriver driver)
        {
            _driver = driver ?? throw new ArgumentNullException(nameof(driver));
            _wait = new WebDriverWait(_driver, _defaultWaitTimeout);
            // You might want to wait for a specific element indicating the page is fully loaded
            // _wait.Until(ExpectedConditions.ElementIsVisible(By.Id("some-stable-element-id")));
        }

        // --- Locators ---
        private static readonly By _hereLocator = By.XPath("//a[normalize-space(.)=''here'']");
        private static readonly By _aboutLocator = By.CssSelector("a.MV3Tnb");
        private static readonly By _storeLocator = By.CssSelector("a.MV3Tnb");
        private static readonly By _gmailLocator = By.CssSelector("a.gb_X");
        private static readonly By _imagesLocator = By.CssSelector("a.gb_X");
        private static readonly By _link1Locator = By.CssSelector("a.gb_B[role='button']");
        private static readonly By _signInLocator = By.CssSelector("a.gb_Ua.gb_zd.gb_qd.gb_hd");
        private static readonly By _apjfqbLocator = By.Id("APjFqb");
        private static readonly By _generic1Locator = By.CssSelector("div.vOY7J[role='button']");
        private static readonly By _generic2Locator = By.CssSelector("div.XDyW0e[role='button']");
        private static readonly By _generic3Locator = By.CssSelector("div.nDcEnd[role='button']");
        private static readonly By _seeMoreLocator = By.CssSelector("div.Sz7Lee.MagqMc.U48fD[role='button']");
        private static readonly By _deleteLocator = By.CssSelector("div.AQZ9Vd[role='button']");
        private static readonly By _generic4Locator = By.CssSelector("div.Tnv2td[role='button']");
        private static readonly By _delete2Locator = By.CssSelector("div.AQZ9Vd[role='button']");
        private static readonly By _generic5Locator = By.CssSelector("div.Tnv2td[role='button']");
        private static readonly By _btnkLocator = By.Name("btnK");
        private static readonly By _btniLocator = By.Name("btnI");
        private static readonly By _reportInappropriatePredictioLocator = By.CssSelector("div.WzNHm.mWcf0e[role='button']");
        private static readonly By _btnk2Locator = By.Name("btnK");
        private static readonly By _gbqfbbLocator = By.Id("gbqfbb");
        private static readonly By _scaEsvLocator = By.Name("sca_esv");
        private static readonly By _sourceLocator = By.Name("source");
        private static readonly By _eiLocator = By.Name("ei");
        private static readonly By _iflsigLocator = By.Name("iflsig");
        private static readonly By _advertisingLocator = By.CssSelector("a.pHiOh");
        private static readonly By _businessLocator = By.CssSelector("a.pHiOh");
        private static readonly By _howSearchWorksLocator = By.CssSelector("a.pHiOh");
        private static readonly By _ourThirdDecadeOfClimateActionJoinUsLocator = By.CssSelector("a.pHiOh");
        private static readonly By _privacyLocator = By.CssSelector("a.pHiOh");
        private static readonly By _termsLocator = By.CssSelector("a.pHiOh");
        private static readonly By _settingsLocator = By.CssSelector("div.CcNe6e[role='button']");
        private static readonly By _searchSettingsLocator = By.CssSelector("a[role='menuitem']");
        private static readonly By _advancedSearchLocator = By.CssSelector("a[role='menuitem']");
        private static readonly By _yourDataInSearchLocator = By.CssSelector("a[role='menuitem']");
        private static readonly By _personalisationAndCookiesLocator = By.CssSelector("a[role='menuitem']");
        private static readonly By _searchHistoryLocator = By.CssSelector("a[role='menuitem']");
        private static readonly By _searchHelpLocator = By.CssSelector("a[role='menuitem']");
        private static readonly By _vc3jofLocator = By.Id("vc3jof");
        private static readonly By _gkss1dLocator = By.Id("gksS1d");
        private static readonly By _cookiesLocator = By.CssSelector("a.F4a1l");
        private static readonly By _w0wltcLocator = By.Id("W0wltc");
        private static readonly By _l2aglbLocator = By.Id("L2AGLb");
        private static readonly By _vnjccbLocator = By.Id("VnjCcb");
        private static readonly By _moreOptionsLocator = By.CssSelector("a.eOjPIe");
        private static readonly By _rp3v5cLocator = By.Id("RP3V5c");
        private static readonly By _hq1lbLocator = By.Id("HQ1lb");
        private static readonly By _csiLocator = By.Name("csi");

        // --- Interaction Methods ---
        private IWebElement FindHereElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_hereLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_hereLocator));
            return _driver.FindElement(_hereLocator);
        }

        /// <summary>
        /// Clicks the here Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickHere()
        {
            Console.WriteLine("Clicking Here...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_hereLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Here: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the here Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetHereText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_hereLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the here Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsHereDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_hereLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_hereLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Here ---

        private IWebElement FindAboutElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_aboutLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_aboutLocator));
            return _driver.FindElement(_aboutLocator);
        }

        /// <summary>
        /// Clicks the About Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAbout()
        {
            Console.WriteLine("Clicking About...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_aboutLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking About: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the About Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAboutText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_aboutLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the About Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAboutDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_aboutLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_aboutLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END About ---

        private IWebElement FindStoreElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_storeLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_storeLocator));
            return _driver.FindElement(_storeLocator);
        }

        /// <summary>
        /// Clicks the Store Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickStore()
        {
            Console.WriteLine("Clicking Store...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_storeLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Store: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Store Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetStoreText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_storeLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Store Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsStoreDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_storeLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_storeLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Store ---

        private IWebElement FindGmailElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_gmailLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_gmailLocator));
            return _driver.FindElement(_gmailLocator);
        }

        /// <summary>
        /// Clicks the Gmail Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickGmail()
        {
            Console.WriteLine("Clicking Gmail...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_gmailLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Gmail: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Gmail Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetGmailText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_gmailLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Gmail Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsGmailDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_gmailLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_gmailLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Gmail ---

        private IWebElement FindImagesElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_imagesLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_imagesLocator));
            return _driver.FindElement(_imagesLocator);
        }

        /// <summary>
        /// Clicks the Images Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickImages()
        {
            Console.WriteLine("Clicking Images...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_imagesLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Images: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Images Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetImagesText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_imagesLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Images Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsImagesDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_imagesLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_imagesLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Images ---

        private IWebElement FindLink1Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_link1Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_link1Locator));
            return _driver.FindElement(_link1Locator);
        }

        /// <summary>
        /// Clicks the Link Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickLink1()
        {
            Console.WriteLine("Clicking Link1...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_link1Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Link1: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Link Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetLink1Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_link1Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Link Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsLink1Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_link1Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_link1Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Link1 ---

        private IWebElement FindSignInElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_signInLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_signInLocator));
            return _driver.FindElement(_signInLocator);
        }

        /// <summary>
        /// Clicks the Sign in Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSignIn()
        {
            Console.WriteLine("Clicking SignIn...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_signInLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking SignIn: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Sign in Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSignInText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_signInLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Sign in Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSignInDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_signInLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_signInLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END SignIn ---

        private IWebElement FindApjfqbElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_apjfqbLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_apjfqbLocator));
            return _driver.FindElement(_apjfqbLocator);
        }

        /// <summary>
        /// Enters text into the APjFqb field.
        /// Waits for the element to be visible, clears it, then sends keys.
        /// </summary>
        /// <param name="text">The text to enter.</param>
        public void EnterApjfqbText(string text)
        {
            Console.WriteLine($"Entering text '{text}' into Apjfqb...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementIsVisible(_apjfqbLocator));
                 element.Clear();
                 element.SendKeys(text);
                 // Consider adding a wait if SendKeys triggers async actions
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error entering text into Apjfqb: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Gets the current value from the APjFqb field.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The text value of the element.</returns>
        public string GetApjfqbValue()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_apjfqbLocator));
            return element.GetAttribute("value");
        }

        /// <summary>
        /// Checks if the APjFqb TextArea is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsApjfqbDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_apjfqbLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_apjfqbLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Apjfqb ---

        private IWebElement FindGeneric1Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_generic1Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_generic1Locator));
            return _driver.FindElement(_generic1Locator);
        }

        /// <summary>
        /// Clicks the Generic Generic.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickGeneric1()
        {
            Console.WriteLine("Clicking Generic1...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_generic1Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Generic1: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Generic Generic.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetGeneric1Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_generic1Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Generic Generic is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsGeneric1Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_generic1Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_generic1Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Generic1 ---

        private IWebElement FindGeneric2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_generic2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_generic2Locator));
            return _driver.FindElement(_generic2Locator);
        }

        /// <summary>
        /// Clicks the Generic Generic.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickGeneric2()
        {
            Console.WriteLine("Clicking Generic2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_generic2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Generic2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Generic Generic.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetGeneric2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_generic2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Generic Generic is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsGeneric2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_generic2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_generic2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Generic2 ---

        private IWebElement FindGeneric3Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_generic3Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_generic3Locator));
            return _driver.FindElement(_generic3Locator);
        }

        /// <summary>
        /// Clicks the Generic Generic.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickGeneric3()
        {
            Console.WriteLine("Clicking Generic3...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_generic3Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Generic3: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Generic Generic.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetGeneric3Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_generic3Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Generic Generic is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsGeneric3Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_generic3Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_generic3Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Generic3 ---

        private IWebElement FindSeeMoreElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_seeMoreLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_seeMoreLocator));
            return _driver.FindElement(_seeMoreLocator);
        }

        /// <summary>
        /// Clicks the See more Generic.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSeeMore()
        {
            Console.WriteLine("Clicking SeeMore...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_seeMoreLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking SeeMore: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the See more Generic.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSeeMoreText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_seeMoreLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the See more Generic is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSeeMoreDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_seeMoreLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_seeMoreLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END SeeMore ---

        private IWebElement FindDeleteElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_deleteLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_deleteLocator));
            return _driver.FindElement(_deleteLocator);
        }

        /// <summary>
        /// Clicks the Delete Generic.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickDelete()
        {
            Console.WriteLine("Clicking Delete...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_deleteLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Delete: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Delete Generic.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetDeleteText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_deleteLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Delete Generic is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsDeleteDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_deleteLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_deleteLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Delete ---

        private IWebElement FindGeneric4Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_generic4Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_generic4Locator));
            return _driver.FindElement(_generic4Locator);
        }

        /// <summary>
        /// Clicks the Generic Generic.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickGeneric4()
        {
            Console.WriteLine("Clicking Generic4...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_generic4Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Generic4: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Generic Generic.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetGeneric4Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_generic4Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Generic Generic is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsGeneric4Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_generic4Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_generic4Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Generic4 ---

        private IWebElement FindDelete2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_delete2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_delete2Locator));
            return _driver.FindElement(_delete2Locator);
        }

        /// <summary>
        /// Clicks the Delete Generic.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickDelete2()
        {
            Console.WriteLine("Clicking Delete2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_delete2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Delete2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Delete Generic.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetDelete2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_delete2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Delete Generic is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsDelete2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_delete2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_delete2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Delete2 ---

        private IWebElement FindGeneric5Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_generic5Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_generic5Locator));
            return _driver.FindElement(_generic5Locator);
        }

        /// <summary>
        /// Clicks the Generic Generic.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickGeneric5()
        {
            Console.WriteLine("Clicking Generic5...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_generic5Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Generic5: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Generic Generic.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetGeneric5Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_generic5Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Generic Generic is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsGeneric5Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_generic5Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_generic5Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Generic5 ---

        private IWebElement FindBtnkElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_btnkLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_btnkLocator));
            return _driver.FindElement(_btnkLocator);
        }

        /// <summary>
        /// Clicks the btnK Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBtnk()
        {
            Console.WriteLine("Clicking Btnk...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_btnkLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Btnk: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the btnK Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBtnkText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_btnkLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the btnK Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBtnkDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_btnkLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_btnkLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Btnk ---

        private IWebElement FindBtniElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_btniLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_btniLocator));
            return _driver.FindElement(_btniLocator);
        }

        /// <summary>
        /// Clicks the btnI Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBtni()
        {
            Console.WriteLine("Clicking Btni...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_btniLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Btni: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the btnI Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBtniText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_btniLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the btnI Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBtniDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_btniLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_btniLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Btni ---

        private IWebElement FindReportInappropriatePredictioElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_reportInappropriatePredictioLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_reportInappropriatePredictioLocator));
            return _driver.FindElement(_reportInappropriatePredictioLocator);
        }

        /// <summary>
        /// Clicks the Report inappropriate predictio Generic.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickReportInappropriatePredictio()
        {
            Console.WriteLine("Clicking ReportInappropriatePredictio...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_reportInappropriatePredictioLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking ReportInappropriatePredictio: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Report inappropriate predictio Generic.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetReportInappropriatePredictioText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_reportInappropriatePredictioLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Report inappropriate predictio Generic is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsReportInappropriatePredictioDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_reportInappropriatePredictioLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_reportInappropriatePredictioLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END ReportInappropriatePredictio ---

        private IWebElement FindBtnk2Element()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_btnk2Locator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_btnk2Locator));
            return _driver.FindElement(_btnk2Locator);
        }

        /// <summary>
        /// Clicks the btnK Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBtnk2()
        {
            Console.WriteLine("Clicking Btnk2...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_btnk2Locator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Btnk2: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the btnK Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBtnk2Text()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_btnk2Locator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the btnK Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBtnk2Displayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_btnk2Locator));
                // Then check if it's currently displayed
                return _driver.FindElement(_btnk2Locator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Btnk2 ---

        private IWebElement FindGbqfbbElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_gbqfbbLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_gbqfbbLocator));
            return _driver.FindElement(_gbqfbbLocator);
        }

        /// <summary>
        /// Clicks the gbqfbb Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickGbqfbb()
        {
            Console.WriteLine("Clicking Gbqfbb...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_gbqfbbLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Gbqfbb: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the gbqfbb Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetGbqfbbText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_gbqfbbLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the gbqfbb Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsGbqfbbDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_gbqfbbLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_gbqfbbLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Gbqfbb ---

        private IWebElement FindScaEsvElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_scaEsvLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_scaEsvLocator));
            return _driver.FindElement(_scaEsvLocator);
        }

        /// <summary>
        /// Enters text into the sca_esv field.
        /// Waits for the element to be visible, clears it, then sends keys.
        /// </summary>
        /// <param name="text">The text to enter.</param>
        public void EnterScaEsvText(string text)
        {
            Console.WriteLine($"Entering text '{text}' into ScaEsv...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementIsVisible(_scaEsvLocator));
                 element.Clear();
                 element.SendKeys(text);
                 // Consider adding a wait if SendKeys triggers async actions
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error entering text into ScaEsv: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Gets the current value from the sca_esv field.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The text value of the element.</returns>
        public string GetScaEsvValue()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_scaEsvLocator));
            return element.GetAttribute("value");
        }

        /// <summary>
        /// Checks if the sca_esv Input is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsScaEsvDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_scaEsvLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_scaEsvLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END ScaEsv ---

        private IWebElement FindSourceElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_sourceLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_sourceLocator));
            return _driver.FindElement(_sourceLocator);
        }

        /// <summary>
        /// Enters text into the source field.
        /// Waits for the element to be visible, clears it, then sends keys.
        /// </summary>
        /// <param name="text">The text to enter.</param>
        public void EnterSourceText(string text)
        {
            Console.WriteLine($"Entering text '{text}' into Source...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementIsVisible(_sourceLocator));
                 element.Clear();
                 element.SendKeys(text);
                 // Consider adding a wait if SendKeys triggers async actions
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error entering text into Source: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Gets the current value from the source field.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The text value of the element.</returns>
        public string GetSourceValue()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_sourceLocator));
            return element.GetAttribute("value");
        }

        /// <summary>
        /// Checks if the source Input is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSourceDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_sourceLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_sourceLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Source ---

        private IWebElement FindEiElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_eiLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_eiLocator));
            return _driver.FindElement(_eiLocator);
        }

        /// <summary>
        /// Enters text into the ei field.
        /// Waits for the element to be visible, clears it, then sends keys.
        /// </summary>
        /// <param name="text">The text to enter.</param>
        public void EnterEiText(string text)
        {
            Console.WriteLine($"Entering text '{text}' into Ei...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementIsVisible(_eiLocator));
                 element.Clear();
                 element.SendKeys(text);
                 // Consider adding a wait if SendKeys triggers async actions
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error entering text into Ei: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Gets the current value from the ei field.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The text value of the element.</returns>
        public string GetEiValue()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_eiLocator));
            return element.GetAttribute("value");
        }

        /// <summary>
        /// Checks if the ei Input is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsEiDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_eiLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_eiLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Ei ---

        private IWebElement FindIflsigElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_iflsigLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_iflsigLocator));
            return _driver.FindElement(_iflsigLocator);
        }

        /// <summary>
        /// Enters text into the iflsig field.
        /// Waits for the element to be visible, clears it, then sends keys.
        /// </summary>
        /// <param name="text">The text to enter.</param>
        public void EnterIflsigText(string text)
        {
            Console.WriteLine($"Entering text '{text}' into Iflsig...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementIsVisible(_iflsigLocator));
                 element.Clear();
                 element.SendKeys(text);
                 // Consider adding a wait if SendKeys triggers async actions
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error entering text into Iflsig: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Gets the current value from the iflsig field.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The text value of the element.</returns>
        public string GetIflsigValue()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_iflsigLocator));
            return element.GetAttribute("value");
        }

        /// <summary>
        /// Checks if the iflsig Input is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsIflsigDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_iflsigLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_iflsigLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Iflsig ---

        private IWebElement FindAdvertisingElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_advertisingLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_advertisingLocator));
            return _driver.FindElement(_advertisingLocator);
        }

        /// <summary>
        /// Clicks the Advertising Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAdvertising()
        {
            Console.WriteLine("Clicking Advertising...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_advertisingLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Advertising: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Advertising Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAdvertisingText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_advertisingLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Advertising Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAdvertisingDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_advertisingLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_advertisingLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Advertising ---

        private IWebElement FindBusinessElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_businessLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_businessLocator));
            return _driver.FindElement(_businessLocator);
        }

        /// <summary>
        /// Clicks the Business Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickBusiness()
        {
            Console.WriteLine("Clicking Business...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_businessLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Business: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Business Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetBusinessText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_businessLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Business Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsBusinessDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_businessLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_businessLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Business ---

        private IWebElement FindHowSearchWorksElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_howSearchWorksLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_howSearchWorksLocator));
            return _driver.FindElement(_howSearchWorksLocator);
        }

        /// <summary>
        /// Clicks the How Search works Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickHowSearchWorks()
        {
            Console.WriteLine("Clicking HowSearchWorks...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_howSearchWorksLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking HowSearchWorks: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the How Search works Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetHowSearchWorksText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_howSearchWorksLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the How Search works Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsHowSearchWorksDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_howSearchWorksLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_howSearchWorksLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END HowSearchWorks ---

        private IWebElement FindOurThirdDecadeOfClimateActionJoinUsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_ourThirdDecadeOfClimateActionJoinUsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_ourThirdDecadeOfClimateActionJoinUsLocator));
            return _driver.FindElement(_ourThirdDecadeOfClimateActionJoinUsLocator);
        }

        /// <summary>
        /// Clicks the Our third decade of climate action: join us Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickOurThirdDecadeOfClimateActionJoinUs()
        {
            Console.WriteLine("Clicking OurThirdDecadeOfClimateActionJoinUs...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_ourThirdDecadeOfClimateActionJoinUsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking OurThirdDecadeOfClimateActionJoinUs: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Our third decade of climate action: join us Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetOurThirdDecadeOfClimateActionJoinUsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_ourThirdDecadeOfClimateActionJoinUsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Our third decade of climate action: join us Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsOurThirdDecadeOfClimateActionJoinUsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_ourThirdDecadeOfClimateActionJoinUsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_ourThirdDecadeOfClimateActionJoinUsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END OurThirdDecadeOfClimateActionJoinUs ---

        private IWebElement FindPrivacyElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_privacyLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_privacyLocator));
            return _driver.FindElement(_privacyLocator);
        }

        /// <summary>
        /// Clicks the Privacy Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickPrivacy()
        {
            Console.WriteLine("Clicking Privacy...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_privacyLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Privacy: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Privacy Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetPrivacyText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_privacyLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Privacy Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsPrivacyDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_privacyLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_privacyLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Privacy ---

        private IWebElement FindTermsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_termsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_termsLocator));
            return _driver.FindElement(_termsLocator);
        }

        /// <summary>
        /// Clicks the Terms Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickTerms()
        {
            Console.WriteLine("Clicking Terms...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_termsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Terms: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Terms Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetTermsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_termsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Terms Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsTermsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_termsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_termsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Terms ---

        private IWebElement FindSettingsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_settingsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_settingsLocator));
            return _driver.FindElement(_settingsLocator);
        }

        /// <summary>
        /// Clicks the Settings Generic.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSettings()
        {
            Console.WriteLine("Clicking Settings...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_settingsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Settings: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Settings Generic.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSettingsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_settingsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Settings Generic is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSettingsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_settingsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_settingsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Settings ---

        private IWebElement FindSearchSettingsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_searchSettingsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_searchSettingsLocator));
            return _driver.FindElement(_searchSettingsLocator);
        }

        /// <summary>
        /// Clicks the Search settings Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSearchSettings()
        {
            Console.WriteLine("Clicking SearchSettings...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_searchSettingsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking SearchSettings: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Search settings Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSearchSettingsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_searchSettingsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Search settings Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSearchSettingsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_searchSettingsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_searchSettingsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END SearchSettings ---

        private IWebElement FindAdvancedSearchElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_advancedSearchLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_advancedSearchLocator));
            return _driver.FindElement(_advancedSearchLocator);
        }

        /// <summary>
        /// Clicks the Advanced search Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickAdvancedSearch()
        {
            Console.WriteLine("Clicking AdvancedSearch...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_advancedSearchLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking AdvancedSearch: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Advanced search Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetAdvancedSearchText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_advancedSearchLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Advanced search Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsAdvancedSearchDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_advancedSearchLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_advancedSearchLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END AdvancedSearch ---

        private IWebElement FindYourDataInSearchElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_yourDataInSearchLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_yourDataInSearchLocator));
            return _driver.FindElement(_yourDataInSearchLocator);
        }

        /// <summary>
        /// Clicks the Your data in Search Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickYourDataInSearch()
        {
            Console.WriteLine("Clicking YourDataInSearch...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_yourDataInSearchLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking YourDataInSearch: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Your data in Search Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetYourDataInSearchText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_yourDataInSearchLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Your data in Search Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsYourDataInSearchDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_yourDataInSearchLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_yourDataInSearchLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END YourDataInSearch ---

        private IWebElement FindPersonalisationAndCookiesElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_personalisationAndCookiesLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_personalisationAndCookiesLocator));
            return _driver.FindElement(_personalisationAndCookiesLocator);
        }

        /// <summary>
        /// Clicks the Personalisation and cookies Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickPersonalisationAndCookies()
        {
            Console.WriteLine("Clicking PersonalisationAndCookies...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_personalisationAndCookiesLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking PersonalisationAndCookies: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Personalisation and cookies Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetPersonalisationAndCookiesText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_personalisationAndCookiesLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Personalisation and cookies Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsPersonalisationAndCookiesDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_personalisationAndCookiesLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_personalisationAndCookiesLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END PersonalisationAndCookies ---

        private IWebElement FindSearchHistoryElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_searchHistoryLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_searchHistoryLocator));
            return _driver.FindElement(_searchHistoryLocator);
        }

        /// <summary>
        /// Clicks the Search history Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSearchHistory()
        {
            Console.WriteLine("Clicking SearchHistory...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_searchHistoryLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking SearchHistory: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Search history Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSearchHistoryText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_searchHistoryLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Search history Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSearchHistoryDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_searchHistoryLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_searchHistoryLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END SearchHistory ---

        private IWebElement FindSearchHelpElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_searchHelpLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_searchHelpLocator));
            return _driver.FindElement(_searchHelpLocator);
        }

        /// <summary>
        /// Clicks the Search help Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickSearchHelp()
        {
            Console.WriteLine("Clicking SearchHelp...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_searchHelpLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking SearchHelp: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the Search help Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetSearchHelpText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_searchHelpLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the Search help Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsSearchHelpDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_searchHelpLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_searchHelpLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END SearchHelp ---

        private IWebElement FindVc3jofElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_vc3jofLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_vc3jofLocator));
            return _driver.FindElement(_vc3jofLocator);
        }

        /// <summary>
        /// Clicks the vc3jof Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickVc3jof()
        {
            Console.WriteLine("Clicking Vc3jof...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_vc3jofLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Vc3jof: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the vc3jof Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetVc3jofText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_vc3jofLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the vc3jof Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsVc3jofDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_vc3jofLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_vc3jofLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Vc3jof ---

        private IWebElement FindGkss1dElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_gkss1dLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_gkss1dLocator));
            return _driver.FindElement(_gkss1dLocator);
        }

        /// <summary>
        /// Clicks the gksS1d Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickGkss1d()
        {
            Console.WriteLine("Clicking Gkss1d...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_gkss1dLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Gkss1d: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the gksS1d Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetGkss1dText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_gkss1dLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the gksS1d Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsGkss1dDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_gkss1dLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_gkss1dLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Gkss1d ---

        private IWebElement FindCookiesElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_cookiesLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_cookiesLocator));
            return _driver.FindElement(_cookiesLocator);
        }

        /// <summary>
        /// Clicks the cookies Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickCookies()
        {
            Console.WriteLine("Clicking Cookies...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_cookiesLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Cookies: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the cookies Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetCookiesText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_cookiesLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the cookies Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsCookiesDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_cookiesLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_cookiesLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Cookies ---

        private IWebElement FindW0wltcElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_w0wltcLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_w0wltcLocator));
            return _driver.FindElement(_w0wltcLocator);
        }

        /// <summary>
        /// Clicks the W0wltc Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickW0wltc()
        {
            Console.WriteLine("Clicking W0wltc...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_w0wltcLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking W0wltc: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the W0wltc Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetW0wltcText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_w0wltcLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the W0wltc Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsW0wltcDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_w0wltcLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_w0wltcLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END W0wltc ---

        private IWebElement FindL2aglbElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_l2aglbLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_l2aglbLocator));
            return _driver.FindElement(_l2aglbLocator);
        }

        /// <summary>
        /// Clicks the L2AGLb Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickL2aglb()
        {
            Console.WriteLine("Clicking L2aglb...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_l2aglbLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking L2aglb: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the L2AGLb Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetL2aglbText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_l2aglbLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the L2AGLb Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsL2aglbDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_l2aglbLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_l2aglbLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END L2aglb ---

        private IWebElement FindVnjccbElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_vnjccbLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_vnjccbLocator));
            return _driver.FindElement(_vnjccbLocator);
        }

        /// <summary>
        /// Clicks the VnjCcb Button.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickVnjccb()
        {
            Console.WriteLine("Clicking Vnjccb...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_vnjccbLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Vnjccb: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the VnjCcb Button.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetVnjccbText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_vnjccbLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the VnjCcb Button is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsVnjccbDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_vnjccbLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_vnjccbLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Vnjccb ---

        private IWebElement FindMoreOptionsElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_moreOptionsLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_moreOptionsLocator));
            return _driver.FindElement(_moreOptionsLocator);
        }

        /// <summary>
        /// Clicks the More options Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickMoreOptions()
        {
            Console.WriteLine("Clicking MoreOptions...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_moreOptionsLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking MoreOptions: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the More options Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetMoreOptionsText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_moreOptionsLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the More options Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsMoreOptionsDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_moreOptionsLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_moreOptionsLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END MoreOptions ---

        private IWebElement FindRp3v5cElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_rp3v5cLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_rp3v5cLocator));
            return _driver.FindElement(_rp3v5cLocator);
        }

        /// <summary>
        /// Clicks the RP3V5c Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickRp3v5c()
        {
            Console.WriteLine("Clicking Rp3v5c...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_rp3v5cLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Rp3v5c: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the RP3V5c Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetRp3v5cText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_rp3v5cLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the RP3V5c Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsRp3v5cDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_rp3v5cLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_rp3v5cLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Rp3v5c ---

        private IWebElement FindHq1lbElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_hq1lbLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_hq1lbLocator));
            return _driver.FindElement(_hq1lbLocator);
        }

        /// <summary>
        /// Clicks the HQ1lb Link.
        /// Waits for the element to be clickable.
        /// </summary>
        public void ClickHq1lb()
        {
            Console.WriteLine("Clicking Hq1lb...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementToBeClickable(_hq1lbLocator));
                 element.Click();
                 // Consider adding a small delay or wait for expected outcome if needed
                 // Example: WaitForAjaxOrPageLoad();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error clicking Hq1lb: {ex.Message}");
                // Rethrow, log, or handle as appropriate for your framework
                throw;
            }
        }

        /// <summary>
        /// Gets the text content of the HQ1lb Link.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The inner text of the element.</returns>
        public string GetHq1lbText()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_hq1lbLocator));
            return element.Text;
        }

        /// <summary>
        /// Checks if the HQ1lb Link is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsHq1lbDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_hq1lbLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_hq1lbLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Hq1lb ---

        private IWebElement FindCsiElement()
        {
            // Wait for the element to be present in the DOM
            _wait.Until(ExpectedConditions.ElementExists(_csiLocator));
            // You might also wait for visibility depending on the interaction:
            // _wait.Until(ExpectedConditions.ElementIsVisible(_csiLocator));
            return _driver.FindElement(_csiLocator);
        }

        /// <summary>
        /// Enters text into the csi field.
        /// Waits for the element to be visible, clears it, then sends keys.
        /// </summary>
        /// <param name="text">The text to enter.</param>
        public void EnterCsiText(string text)
        {
            Console.WriteLine($"Entering text '{text}' into Csi...");
            try
            {
                 var element = _wait.Until(ExpectedConditions.ElementIsVisible(_csiLocator));
                 element.Clear();
                 element.SendKeys(text);
                 // Consider adding a wait if SendKeys triggers async actions
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error entering text into Csi: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Gets the current value from the csi field.
        /// Waits for the element to be visible.
        /// </summary>
        /// <returns>The text value of the element.</returns>
        public string GetCsiValue()
        {
            var element = _wait.Until(ExpectedConditions.ElementIsVisible(_csiLocator));
            return element.GetAttribute("value");
        }

        /// <summary>
        /// Checks if the csi TextArea is displayed.
        /// Uses a short wait for presence before checking visibility.
        /// </summary>
        /// <returns>True if displayed, false otherwise.</returns>
        public bool IsCsiDisplayed()
        {
            try
            {
                // First, wait briefly for the element to exist in the DOM
                var shortWait = new WebDriverWait(_driver, TimeSpan.FromSeconds(2));
                shortWait.Until(ExpectedConditions.ElementExists(_csiLocator));
                // Then check if it's currently displayed
                return _driver.FindElement(_csiLocator).Displayed;
            }
            catch (NoSuchElementException)
            {
                return false; // Not present
            }
            catch (WebDriverTimeoutException)
            {
                return false; // Not present within the short wait
            }
             catch (StaleElementReferenceException)
            {
                 // Element was found but became stale, try finding again briefly
                 try { return _driver.FindElement({locatorFieldName}).Displayed; }
                 catch { return false; } // Still stale or gone
            }
        }

        // --- END Csi ---

        // --- Helper Methods ---
        // Consider adding helper methods for common wait conditions
        // Example: Wait for AJAX calls to complete, wait for page transitions
        /*
        private void WaitForAjaxOrPageLoad(int timeoutSeconds = 15)
        {
            // This is a placeholder. Implementation depends heavily on the 
            // specific application being tested (e.g., check jQuery.active == 0,
            // wait for a loading spinner to disappear, etc.)
            try
            {
                 var jsExecutor = (IJavaScriptExecutor)_driver;
                 var wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(timeoutSeconds));
                 wait.Until(driver => jsExecutor.ExecuteScript("return document.readyState").Equals("complete"));
                 // Add more specific checks if needed, e.g., for jQuery:
                 // wait.Until(driver => (bool)jsExecutor.ExecuteScript("return (typeof jQuery !== 'undefined') && (jQuery.active === 0)"));
            }
             catch (Exception ex)
            {
                Console.Error.WriteLine($"Error during WaitForAjaxOrPageLoad: {ex.Message}");
                // Decide if this should throw or just log
            }
        }
        */

    }
}
